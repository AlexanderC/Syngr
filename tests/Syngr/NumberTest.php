<?php
namespace Syngr;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-22 at 08:42:26.
 */
class NumberTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Number
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Number(100);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     */
    public function testGetInitialContent()
    {
        $this->assertEquals(100, $this->object->value());
    }

    /**
     * @covers Syngr\Number::absolute()
     */
    public function testAbsolute()
    {
        $this->object->setContent(-100);
        $this->assertEquals(
            100,
            $this->object->absolute()->value()
        );
    }

    /**
     * @covers Syngr\Number::ceil()
     */
    public function testCeiling()
    {
        $this->object->setContent(4.8);
        $this->assertEquals(
            5,
            $this->object->ceil()->value()
        );
    }

    /**
     * @covers Syngr\Number::floor()
     */
    public function testFloor()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers Syngr\Number::min()
     */
    public function testMin()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers Syngr\Number::max()
     */
    public function testMax()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers Syngr\Number::sqrt()
     */
    public function testSqrt()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::convert()
     */
    public function testConvert()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::random()
     */
    public function testRandom()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::exp()
     */
    public function testExp()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::exp()
     */
    public function testExpMinusOne()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::log()
     */
    public function testLog()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::log()
     */
    public function testLogNatural()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::log()
     */
    public function testLogWithBase()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::pow()
     */
    public function testPow()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::cos()
     */
    public function testCosArc()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::cos()
     */
    public function testCos()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::cos()
     */
    public function testCosHyperbolic()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::cos()
     */
    public function testCosInverseHyperbolic()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::sin()
     */
    public function testSinArc()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::sin()
     */
    public function testSin()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::sin()
     */
    public function testSinHyperbolic()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::sin()
     */
    public function testSinInverseHyperbolic()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::tan()
     */
    public function testTanArc()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::tan()
     */
    public function testTan()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::tan()
     */
    public function testTanHyperbolic()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::tan()
     */
    public function testTanInverseHyperbolic()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::is_finite()
     */
    public function testIs_finite()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::is_infinite()
     */
    public function testIs_infinite()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers class::in_nan()
     */
    public function testIn_nan()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

}
